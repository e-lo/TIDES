{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TIDES Transit Specification Suite \u00b6 Transit ITS Data Exchange Specification (TIDES) for historical transit operation data. This repository provides data schemas and tools to support the access, management, and improvement of historical transit operations data, including vehicle operations, passenger activity, fare collection, and other similar data. TIDES specification \u00b6 The TIDES specification is maintained in the /spec sub-directory as a series of JSON tables compatible with the frictionless data table schema and data package standards. Human-friendlier documentation is auto-generated and available at: Architecture Table Schemas Example Data \u00b6 Sample data can be found in the /samples directory, with one directory for each example. Validating TIDES data \u00b6 TIDES data with a valid datapackage.json can be easily validated using the frictionless framework , which can be installed and invoked as follows: pip install frictionless frictionless validate path/to/your/datapackage.json Data Package \u00b6 To validate a package of TIDES data, you must add a frictionless-compliant datapackage.json alongside your data which describes which files should be validated to which schemas. Most of this can be copied from /data/template/datapackage.json . Once this is created, mapping the data files to the schema, simply run: frictionless validate datapackage.json Specific files \u00b6 Specific files can be validated by running the frictionless framework against them and their corresponding schemas as follows: frictionless validate vehicles.csv --schema https://raw.githubusercontent.com/TIDES-transit/TIDES/main/spec/schema.vehicles.json --schema-sync Contributing to TIDES \u00b6 Those who want to help with the development of the TIDES specification should review the guidance in Contributing Section . Issues \u00b6 Please add issues, bugs, and feature requests to GitHub . Acknowledgment \u00b6 These data schemas and tool definitions developed here are based on the results of research conducted by the Transportation Research Board (TRB) of the National Academies of Science, Engineering, and Medicine (NASEM) under the Transit Cooperative Research Program (TCRP). This research is available at the National Academies website . Note that neither the TIDES Project nor the TIDES-transit repository are associated with TCRP, TRB, or the Academies. The use of the TCRP research results in this repository do not reflect any explicit or implicit endorsement of or participation in this work by the Academies. In addition, the opinions and conclusions expressed or implied in the research are those of the contractor. They are not necessarily those of the Transportation Research Board, the Academies, or the program sponsors.","title":"Home"},{"location":"#tides-transit-specification-suite","text":"Transit ITS Data Exchange Specification (TIDES) for historical transit operation data. This repository provides data schemas and tools to support the access, management, and improvement of historical transit operations data, including vehicle operations, passenger activity, fare collection, and other similar data.","title":"TIDES Transit Specification Suite"},{"location":"#tides-specification","text":"The TIDES specification is maintained in the /spec sub-directory as a series of JSON tables compatible with the frictionless data table schema and data package standards. Human-friendlier documentation is auto-generated and available at: Architecture Table Schemas","title":"TIDES specification"},{"location":"#example-data","text":"Sample data can be found in the /samples directory, with one directory for each example.","title":"Example Data"},{"location":"#validating-tides-data","text":"TIDES data with a valid datapackage.json can be easily validated using the frictionless framework , which can be installed and invoked as follows: pip install frictionless frictionless validate path/to/your/datapackage.json","title":"Validating TIDES data"},{"location":"#data-package","text":"To validate a package of TIDES data, you must add a frictionless-compliant datapackage.json alongside your data which describes which files should be validated to which schemas. Most of this can be copied from /data/template/datapackage.json . Once this is created, mapping the data files to the schema, simply run: frictionless validate datapackage.json","title":"Data Package"},{"location":"#specific-files","text":"Specific files can be validated by running the frictionless framework against them and their corresponding schemas as follows: frictionless validate vehicles.csv --schema https://raw.githubusercontent.com/TIDES-transit/TIDES/main/spec/schema.vehicles.json --schema-sync","title":"Specific files"},{"location":"#contributing-to-tides","text":"Those who want to help with the development of the TIDES specification should review the guidance in Contributing Section .","title":"Contributing to TIDES"},{"location":"#issues","text":"Please add issues, bugs, and feature requests to GitHub .","title":"Issues"},{"location":"#acknowledgment","text":"These data schemas and tool definitions developed here are based on the results of research conducted by the Transportation Research Board (TRB) of the National Academies of Science, Engineering, and Medicine (NASEM) under the Transit Cooperative Research Program (TCRP). This research is available at the National Academies website . Note that neither the TIDES Project nor the TIDES-transit repository are associated with TCRP, TRB, or the Academies. The use of the TCRP research results in this repository do not reflect any explicit or implicit endorsement of or participation in this work by the Academies. In addition, the opinions and conclusions expressed or implied in the research are those of the contractor. They are not necessarily those of the Transportation Research Board, the Academies, or the program sponsors.","title":"Acknowledgment"},{"location":"architecture/","text":"TIDES Tables Schema \u00b6 Schemas for TIDES suite. Files in Specification \u00b6 TIDES consists of a package of files as defined in the following table. The following table is automatically generated from tides.spec.json name description required vehicle-locations Timestamped vehicle locations and speeds. False passenger-events Timestamped passenger-related events, including boardings and alightings. False fare-transactions Timestamped fare transaction, associated with devices. False stop-visits Summarized boarding, alighting, arrival, departure, and other events (kneel engaged, ramp deployed, etc.) by trip and stop for each service date. False trips-performed Trips performed for each service date. False station-activities Summarized transactions, entries, and exits by stop or station and time period for each service date (for events not associated with a trip). False devices Measurement devices, such as AVL, APC, and AFC devices, associated with vehicles or stops or stations. False train-cars Assets that comprise vehicles, such as train cars, with descriptive information. False vehicle-train-cars Relationships between assets and vehicles. False vehicles Vehicles, including buses and train consists, with descriptive information. False operators Personnel who operate vehicles. False File components for TIDES are specified in tides.spec.json in a format compatible with the frictionless data data package standard. Relationships \u00b6 Files in the TIDES suite are related to each other and other open standards as follows: graph LR; avl(((AVL))) --> vehicle_locations[/vehicle_locations/] APC --> passenger_events[/passenger_events/] AFC --> fare_transactions[/fare_transactions/] vehicle_locations --> summary[Summary Process] fare_transactions --> summary passenger_events --> summary summary --> |stop_id,trip_id,vehicle_id|stop_visits[/stop_visits/] summary -->|stop_id| station_activities[/station_activities/] summary --> trips_performed[/trips_performed/] trips.txt[/trips.txt/] --> |trip_id| stop_times.txt[/stop_times.txt/] stops.txt[/stops.txt/] --> |stop_id|stop_times.txt calendar.txt[/calendar.txt/] --> |service_id|stop_times.txt vehicle_train_cars[/vehicle_train_cars/] -.vehicle_id.- vehicles[/vehicles/] vehicle_train_cars -.- |train_car_id| train_cars[/train_cars/] train_cars -.- |train_car_id| devices[/devices/] vehicles --- |vehicle_id| devices vehicles --> |vehicle_id|trips_performed operators[/operators/] -.-> |operator_id| trips_performed stop_times.txt --> |stop_id,stop_sequence| stop_visits stop_times.txt --> |trips.txt| trips_performed stops.txt --> |stop_id|station_activities stop_times.txt --> |stop_id,stop_sequence| vehicle_locations stop_times.txt --> |stop_id,stop_sequence| passenger_events stop_times.txt --> |stop_id,stop_sequence| fare_transactions subgraph eventf [Event Data] vehicle_locations passenger_events fare_transactions end subgraph summaryf [Summary Files] station_activities stop_visits trips_performed end subgraph gtfs [ GTFS ] stop_times.txt stops.txt trips.txt calendar.txt end subgraph proposedGTFS [ Proposed GTFS ] train_cars vehicle_train_cars vehicles end subgraph additional [ Additional Data ] devices operators end click stops.txt \"https://gtfs.org/schedule/reference/#stopstxt\" click stop_times.txt \"https://gtfs.org/schedule/reference/#stop_timestxt\" click calendar.txt \"https://gtfs.org/schedule/reference/#calendartxt\" click trips.txt \"https://gtfs.org/schedule/reference/#tripstxt\" click station_activities \"../tables/#station-activities\" click stop_visits \"../tables/#stop-visits\" click train_cars \"../tables/#train-cars\" click vehicle_train_cars \"../tables/#vehicle-train-cars\" click vehicles \"../tables/#vehicles\" click devices \"../tables/#devices\" click vehicle_locations \"../tables/#vehicle-locations\" click passenger_events \"../tables/#passenger-events\" click fare_transactions \"../tables/#fare-transactions\"","title":"Architecture"},{"location":"architecture/#tides-tables-schema","text":"Schemas for TIDES suite.","title":"TIDES Tables Schema"},{"location":"architecture/#files-in-specification","text":"TIDES consists of a package of files as defined in the following table. The following table is automatically generated from tides.spec.json name description required vehicle-locations Timestamped vehicle locations and speeds. False passenger-events Timestamped passenger-related events, including boardings and alightings. False fare-transactions Timestamped fare transaction, associated with devices. False stop-visits Summarized boarding, alighting, arrival, departure, and other events (kneel engaged, ramp deployed, etc.) by trip and stop for each service date. False trips-performed Trips performed for each service date. False station-activities Summarized transactions, entries, and exits by stop or station and time period for each service date (for events not associated with a trip). False devices Measurement devices, such as AVL, APC, and AFC devices, associated with vehicles or stops or stations. False train-cars Assets that comprise vehicles, such as train cars, with descriptive information. False vehicle-train-cars Relationships between assets and vehicles. False vehicles Vehicles, including buses and train consists, with descriptive information. False operators Personnel who operate vehicles. False File components for TIDES are specified in tides.spec.json in a format compatible with the frictionless data data package standard.","title":"Files in Specification"},{"location":"architecture/#relationships","text":"Files in the TIDES suite are related to each other and other open standards as follows: graph LR; avl(((AVL))) --> vehicle_locations[/vehicle_locations/] APC --> passenger_events[/passenger_events/] AFC --> fare_transactions[/fare_transactions/] vehicle_locations --> summary[Summary Process] fare_transactions --> summary passenger_events --> summary summary --> |stop_id,trip_id,vehicle_id|stop_visits[/stop_visits/] summary -->|stop_id| station_activities[/station_activities/] summary --> trips_performed[/trips_performed/] trips.txt[/trips.txt/] --> |trip_id| stop_times.txt[/stop_times.txt/] stops.txt[/stops.txt/] --> |stop_id|stop_times.txt calendar.txt[/calendar.txt/] --> |service_id|stop_times.txt vehicle_train_cars[/vehicle_train_cars/] -.vehicle_id.- vehicles[/vehicles/] vehicle_train_cars -.- |train_car_id| train_cars[/train_cars/] train_cars -.- |train_car_id| devices[/devices/] vehicles --- |vehicle_id| devices vehicles --> |vehicle_id|trips_performed operators[/operators/] -.-> |operator_id| trips_performed stop_times.txt --> |stop_id,stop_sequence| stop_visits stop_times.txt --> |trips.txt| trips_performed stops.txt --> |stop_id|station_activities stop_times.txt --> |stop_id,stop_sequence| vehicle_locations stop_times.txt --> |stop_id,stop_sequence| passenger_events stop_times.txt --> |stop_id,stop_sequence| fare_transactions subgraph eventf [Event Data] vehicle_locations passenger_events fare_transactions end subgraph summaryf [Summary Files] station_activities stop_visits trips_performed end subgraph gtfs [ GTFS ] stop_times.txt stops.txt trips.txt calendar.txt end subgraph proposedGTFS [ Proposed GTFS ] train_cars vehicle_train_cars vehicles end subgraph additional [ Additional Data ] devices operators end click stops.txt \"https://gtfs.org/schedule/reference/#stopstxt\" click stop_times.txt \"https://gtfs.org/schedule/reference/#stop_timestxt\" click calendar.txt \"https://gtfs.org/schedule/reference/#calendartxt\" click trips.txt \"https://gtfs.org/schedule/reference/#tripstxt\" click station_activities \"../tables/#station-activities\" click stop_visits \"../tables/#stop-visits\" click train_cars \"../tables/#train-cars\" click vehicle_train_cars \"../tables/#vehicle-train-cars\" click vehicles \"../tables/#vehicles\" click devices \"../tables/#devices\" click vehicle_locations \"../tables/#vehicle-locations\" click passenger_events \"../tables/#passenger-events\" click fare_transactions \"../tables/#fare-transactions\"","title":"Relationships"},{"location":"contributors/","text":"Contributors \u00b6","title":"Contributors"},{"location":"contributors/#contributors","text":"","title":"Contributors"},{"location":"development/","text":"Development \u00b6 Contributing to TIDES \u00b6 Thank you for contributing to the TIDES Project. This document defines the roles and process for contributing to the project and documents the governance roles and approach for decision-making. Roles \u00b6 There are two types of contributors to TIDES: Registered Contributors can create and respond to issues and can generate and comment on pull requests, and All other Stakeholders can create and respond to issues. All contributors and stakeholders are asked to adhere to the Code of Conduct . To become a registered Contributor, fill out the registration form at this link . How to Contribute \u00b6 Contributions should be offered through GitHub issues and pull requests. By making any contribution to the projects, contributors self-certify to the Contributor Agreement . Setup \u00b6 Make sure you have a GitHub account. Make sure you have git , a terminal (e.g. Mac Terminal, CygWin, etc.), and a text editor installed on your local machine. Optionally, you will likely find it easier to use GitHub Desktop , an IDE instead of a simple text editor like VSCode , Eclipse , Sublime Text , etc. Fork the repository into your own GitHub account and clone it locally . Create a branch to work on a new issue (or checkout an existing one where the issue is being worked on). Install pre-commit so you can check your code and text formatting. [Optional] Install act to run github actions locally. Issues \u00b6 Create issues to start discussion on a new topic. If the issue is associated with a pull request, be sure to link the two. There are shortcuts here Pull Requests \u00b6 Use the following guidance in creating and responding to pull requests Keep pull requests small and focused. One issue is best. Link Pull Requests to Issues as appropriate. Complete the pull request template as best you can. Commits \u00b6 Use the following guidance for commits Provide a short, clear title. Capitalize. No period at the end Wrap the body of text at 72 characters Contributor Agreement \u00b6 By making any contribution to the projects, contributors self-certify to the following Contributor Agreement: By making a contribution to this project, I certify that: a. The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or b. The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or c. The contribution was provided directly to me by some other person who certified (a), (b) or \u00a9 and I have not modified it. d. I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved. Attribution: This Contributor Agreement is adapted from the node.js project available here: https://github.com/nodejs/node/blob/main/CONTRIBUTING.md . License to Use \u00b6 The TIDES specification is licensed under the Apache License 2.0 as defined in LICENSE file. Project Governance \u00b6 Ahead of Version 1.0 release, the governance for the TIDES specification is being kept limited and lightweight. The governance approach will be revisited as release of Version 1.0 approaches. Development of the TIDES specification shall be managed by the following groups: Leadership Group Product Management Team Registered Contributors All Other Stakeholders These groups will have the following rights and responsibilities: Leadership Group \u00b6 The Leadership Group is responsible for overall direction and decision-making on the project including: approval of registered contributors creation, scoping, and management of working groups approval of the final specification for Version 1.0 approval of changes to project governance Leadership Group Members John Levin, Metro Transit (Minneapolis-St. Paul, MN) Leadership Group Member GitHub Access : Admin Product Management Team \u00b6 The Product Management Team (PMT) is responsible for creating and maintaining backbone standards infrastructure, processes, and resources to support the development of the TIDES specification. The PMT will support Leadership in developing, reviewing, and recommending for approval changes to the draft specification. The PMT will support Contributors and Stakeholders in their work on the specification. PMT Group Members Hunter Owens, Caltrans Jameelah Young, Jarv.us (on behalf of Caltrans) Elizabeth Sall, UrbanLabs LLC (on behalf of Caltrans) Benjamin Bressette, Caltrans Blake Fleisher, Jarv.us (on behalf of Caltrans) Joey Reid, Metro Transit (Minneapolis-St. Paul, MN) PMT Group Member GitHub Access : Admin Registered Contributors \u00b6 Registered Contributors actively work to develop the TIDES specification. They propose additions, modifications, and improvements to the speciation document through issues and pull requests in this GitHub repository. Registered Contributors must request here to be registered in order to gain access. Requests to become a Contributor must be approved by project Leadership. Registered Contributor Group Members: The list of registered contributors is maintained in the contributors.md file. Registered Contributor Group GitHub Access : Write Stakeholders Group \u00b6 Stakeholders will be informed about progress on TIDES and given the opportunity to review the specification as it is developed. They may provide comments on the specification by creating or responding to Issues in this repository. Stakeholders are not able to generate or comment on pull requests. To be included as a TIDES Stakeholder, join the TIDES Project Google Group. Stakeholder Group Membership: Members of the TIDES Project Google Group Others who have expressed interest in following progress or contributing to TIDES, but who have not requested to be a registered Contributor Stakeholder Group GitHub Access : Read/Create Issues (same as general public) Review and Approval Process \u00b6 Prior to release of Version 1.0 of the specification, the PMT and Leadership will have final approval of all changes. All Contributors are permitted and encouraged to discuss and comment on issues and pull requests and make recommendations for changes to the specification. Leadership will convene a governance group to refine this and decide the approval process for Version 1.0 and the governance and approval process for future revisions to the specification. Code of Conduct \u00b6 Contributors to the TIDES Project are expected to read and follow the CODE_OF_CONDUCT for the project. Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 The community leaders for this effort include project Leadership and the Product Management Team as described in the Project Governance . Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at tidestransit@gmail.com . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations . Contributors \u00b6","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#contributing-to-tides","text":"Thank you for contributing to the TIDES Project. This document defines the roles and process for contributing to the project and documents the governance roles and approach for decision-making.","title":"Contributing to TIDES"},{"location":"development/#roles","text":"There are two types of contributors to TIDES: Registered Contributors can create and respond to issues and can generate and comment on pull requests, and All other Stakeholders can create and respond to issues. All contributors and stakeholders are asked to adhere to the Code of Conduct . To become a registered Contributor, fill out the registration form at this link .","title":"Roles"},{"location":"development/#how-to-contribute","text":"Contributions should be offered through GitHub issues and pull requests. By making any contribution to the projects, contributors self-certify to the Contributor Agreement .","title":"How to Contribute"},{"location":"development/#setup","text":"Make sure you have a GitHub account. Make sure you have git , a terminal (e.g. Mac Terminal, CygWin, etc.), and a text editor installed on your local machine. Optionally, you will likely find it easier to use GitHub Desktop , an IDE instead of a simple text editor like VSCode , Eclipse , Sublime Text , etc. Fork the repository into your own GitHub account and clone it locally . Create a branch to work on a new issue (or checkout an existing one where the issue is being worked on). Install pre-commit so you can check your code and text formatting. [Optional] Install act to run github actions locally.","title":"Setup"},{"location":"development/#issues","text":"Create issues to start discussion on a new topic. If the issue is associated with a pull request, be sure to link the two. There are shortcuts here","title":"Issues"},{"location":"development/#pull-requests","text":"Use the following guidance in creating and responding to pull requests Keep pull requests small and focused. One issue is best. Link Pull Requests to Issues as appropriate. Complete the pull request template as best you can.","title":"Pull Requests"},{"location":"development/#commits","text":"Use the following guidance for commits Provide a short, clear title. Capitalize. No period at the end Wrap the body of text at 72 characters","title":"Commits"},{"location":"development/#contributor-agreement","text":"By making any contribution to the projects, contributors self-certify to the following Contributor Agreement: By making a contribution to this project, I certify that: a. The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or b. The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or c. The contribution was provided directly to me by some other person who certified (a), (b) or \u00a9 and I have not modified it. d. I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved. Attribution: This Contributor Agreement is adapted from the node.js project available here: https://github.com/nodejs/node/blob/main/CONTRIBUTING.md .","title":"Contributor Agreement"},{"location":"development/#license-to-use","text":"The TIDES specification is licensed under the Apache License 2.0 as defined in LICENSE file.","title":"License to Use"},{"location":"development/#project-governance","text":"Ahead of Version 1.0 release, the governance for the TIDES specification is being kept limited and lightweight. The governance approach will be revisited as release of Version 1.0 approaches. Development of the TIDES specification shall be managed by the following groups: Leadership Group Product Management Team Registered Contributors All Other Stakeholders These groups will have the following rights and responsibilities:","title":"Project Governance"},{"location":"development/#leadership-group","text":"The Leadership Group is responsible for overall direction and decision-making on the project including: approval of registered contributors creation, scoping, and management of working groups approval of the final specification for Version 1.0 approval of changes to project governance Leadership Group Members John Levin, Metro Transit (Minneapolis-St. Paul, MN) Leadership Group Member GitHub Access : Admin","title":"Leadership Group"},{"location":"development/#product-management-team","text":"The Product Management Team (PMT) is responsible for creating and maintaining backbone standards infrastructure, processes, and resources to support the development of the TIDES specification. The PMT will support Leadership in developing, reviewing, and recommending for approval changes to the draft specification. The PMT will support Contributors and Stakeholders in their work on the specification. PMT Group Members Hunter Owens, Caltrans Jameelah Young, Jarv.us (on behalf of Caltrans) Elizabeth Sall, UrbanLabs LLC (on behalf of Caltrans) Benjamin Bressette, Caltrans Blake Fleisher, Jarv.us (on behalf of Caltrans) Joey Reid, Metro Transit (Minneapolis-St. Paul, MN) PMT Group Member GitHub Access : Admin","title":"Product Management Team"},{"location":"development/#registered-contributors","text":"Registered Contributors actively work to develop the TIDES specification. They propose additions, modifications, and improvements to the speciation document through issues and pull requests in this GitHub repository. Registered Contributors must request here to be registered in order to gain access. Requests to become a Contributor must be approved by project Leadership. Registered Contributor Group Members: The list of registered contributors is maintained in the contributors.md file. Registered Contributor Group GitHub Access : Write","title":"Registered Contributors"},{"location":"development/#stakeholders-group","text":"Stakeholders will be informed about progress on TIDES and given the opportunity to review the specification as it is developed. They may provide comments on the specification by creating or responding to Issues in this repository. Stakeholders are not able to generate or comment on pull requests. To be included as a TIDES Stakeholder, join the TIDES Project Google Group. Stakeholder Group Membership: Members of the TIDES Project Google Group Others who have expressed interest in following progress or contributing to TIDES, but who have not requested to be a registered Contributor Stakeholder Group GitHub Access : Read/Create Issues (same as general public)","title":"Stakeholders Group"},{"location":"development/#review-and-approval-process","text":"Prior to release of Version 1.0 of the specification, the PMT and Leadership will have final approval of all changes. All Contributors are permitted and encouraged to discuss and comment on issues and pull requests and make recommendations for changes to the specification. Leadership will convene a governance group to refine this and decide the approval process for Version 1.0 and the governance and approval process for future revisions to the specification.","title":"Review and Approval Process"},{"location":"development/#code-of-conduct","text":"Contributors to the TIDES Project are expected to read and follow the CODE_OF_CONDUCT for the project.","title":"Code of Conduct"},{"location":"development/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"development/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"development/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"development/#enforcement-responsibilities","text":"The community leaders for this effort include project Leadership and the Product Management Team as described in the Project Governance . Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"development/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"development/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at tidestransit@gmail.com . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"development/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"development/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"development/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"development/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"development/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"development/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"development/#contributors","text":"","title":"Contributors"},{"location":"samples/","text":"Sample Data \u00b6 Sample data can be found in the /samples directory, with one directory for each data sample. Data Directory Organization \u00b6 Each TIDES Data Package example should follow the following directory structure, consistent with the structure of the Frictionless Data Package specification , including: unique-example-name \\TIDES ## Required. Data to be validated against the TIDES specification \\datapackage.json ## Required. Data package metadata per https://specs.frictionlessdata.io/data-package/ \\raw ## Optional. Data which the agency uses to create TIDES data \\scripts ## Optional. Scripts used to transform raw --> TIDES Adding Examples \u00b6 We encourage the addition of examples, but please follow the following guidelines: No large files This isn\u2019t the place to store your data, rather to document some minimal examples. The recommended size is 100-1000 records per file, more if absolutely required to reproduce an issue with the spec. All individual files should be well under 50 MB. Include Metadata as specified in datapackage.json . Include a README.md in the base folder of your example with an overview so that it can be included in the documentation. Data Package \u00b6 TIDES data packages must include a datapackage.json . Key information to include in datapackage.json includes: Field Description Required title A human-readable title. Required name Identifier string as a URL-friendly slug. Required description Short description of data package. Recommended agency Transit agency name. Recommended ntd_id ID for the National Transit Database. Recommended profile Should be tabular-data-package Required licenses Should be [{\"name\": \"Apache-2.0\"}] to be consistent with this repository Required contributors Array of data contributors [{\"title\": \"My Name\", \"github\": \"my_handle\", \"email\": \"me@myself.com\"}] Recommended maintainers Array of data maintainers [{\"title\": \"My Name\", \"github\": \"my_handle\", \"email\": \"me@myself.com\"}] Recommended resources Array of data files included in your package, formated as a tabular-data-resource Required Data Resource \u00b6 Key fields for each tabular-data-resource are as follows: Field Description Required name Short sluggable name used to refer to data in this file. Required path Path of the data resource file relative to the datapackage.json Required schema Data schema to use to valdiate the data resource to Required sources Array of data sources formatted as a source Recommended Data Source \u00b6 Field Description Required title Description of the data source. Required component What technology component was used to generate this data (directly or indirectly)? Examples include AVL , APC , AFC , etc. Recommended product What product was used to generate this data (directly or indirectly)? Recommended vendor What company makes this product? Recommended Data validation \u00b6 Data with a valid datapackage.json can be easily validated using the frictionless framework , which can be installed and invoked as follows: pip install frictionless frictionless validate path/to/your/datapackage.json Specific files \u00b6 Specific files can be validated by running the frictionless framework against them and their corresponding schemas as follows: frictionless validate vehicles.csv --schema https://raw.githubusercontent.com/TIDES-transit/TIDES/main/spec/vehicles.schema.json --schema-sync Data List \u00b6 Sample * Agency Resources * Vendors","title":"Sample Data"},{"location":"samples/#sample-data","text":"Sample data can be found in the /samples directory, with one directory for each data sample.","title":"Sample Data"},{"location":"samples/#data-directory-organization","text":"Each TIDES Data Package example should follow the following directory structure, consistent with the structure of the Frictionless Data Package specification , including: unique-example-name \\TIDES ## Required. Data to be validated against the TIDES specification \\datapackage.json ## Required. Data package metadata per https://specs.frictionlessdata.io/data-package/ \\raw ## Optional. Data which the agency uses to create TIDES data \\scripts ## Optional. Scripts used to transform raw --> TIDES","title":"Data Directory Organization"},{"location":"samples/#adding-examples","text":"We encourage the addition of examples, but please follow the following guidelines: No large files This isn\u2019t the place to store your data, rather to document some minimal examples. The recommended size is 100-1000 records per file, more if absolutely required to reproduce an issue with the spec. All individual files should be well under 50 MB. Include Metadata as specified in datapackage.json . Include a README.md in the base folder of your example with an overview so that it can be included in the documentation.","title":"Adding Examples"},{"location":"samples/#data-package","text":"TIDES data packages must include a datapackage.json . Key information to include in datapackage.json includes: Field Description Required title A human-readable title. Required name Identifier string as a URL-friendly slug. Required description Short description of data package. Recommended agency Transit agency name. Recommended ntd_id ID for the National Transit Database. Recommended profile Should be tabular-data-package Required licenses Should be [{\"name\": \"Apache-2.0\"}] to be consistent with this repository Required contributors Array of data contributors [{\"title\": \"My Name\", \"github\": \"my_handle\", \"email\": \"me@myself.com\"}] Recommended maintainers Array of data maintainers [{\"title\": \"My Name\", \"github\": \"my_handle\", \"email\": \"me@myself.com\"}] Recommended resources Array of data files included in your package, formated as a tabular-data-resource Required","title":"Data Package"},{"location":"samples/#data-resource","text":"Key fields for each tabular-data-resource are as follows: Field Description Required name Short sluggable name used to refer to data in this file. Required path Path of the data resource file relative to the datapackage.json Required schema Data schema to use to valdiate the data resource to Required sources Array of data sources formatted as a source Recommended","title":"Data Resource"},{"location":"samples/#data-source","text":"Field Description Required title Description of the data source. Required component What technology component was used to generate this data (directly or indirectly)? Examples include AVL , APC , AFC , etc. Recommended product What product was used to generate this data (directly or indirectly)? Recommended vendor What company makes this product? Recommended","title":"Data Source"},{"location":"samples/#data-validation","text":"Data with a valid datapackage.json can be easily validated using the frictionless framework , which can be installed and invoked as follows: pip install frictionless frictionless validate path/to/your/datapackage.json","title":"Data validation"},{"location":"samples/#specific-files","text":"Specific files can be validated by running the frictionless framework against them and their corresponding schemas as follows: frictionless validate vehicles.csv --schema https://raw.githubusercontent.com/TIDES-transit/TIDES/main/spec/vehicles.schema.json --schema-sync","title":"Specific files"},{"location":"samples/#data-list","text":"Sample * Agency Resources * Vendors","title":"Data List"},{"location":"tables/","text":"Data Table Schemas \u00b6 Data table schemas are specified in JSON and are compatible with the frictionless data table schema standards. Event Tables \u00b6 Fare Transactions \u00b6 fare_transactions.schema.json Timestamped fare transaction, associated with devices. Primary key: { transaction_id } name constraints type description rdfType title transaction_id Required Unique string Identifies the fare transaction. date Required date Service date. References GTFS timestamp Required time Recorded event time, including for transactions that may be aggregated values associated with a trip or vehicle. amount Required number Value of the transaction. currency_type Required string Currency used for the transaction. References GTFS https://schema.org/currency fare_action Required Allowed Values - Unknown action type - Purchase - Enter - Exit - Transfer entrance - Transfer exit - Add - Activate - Adjust - Other string Indicates the type of action performed. trip_id_performed string Identifies the trip performed. May be null if the fare collection device is NOT located on a vehicle. May be null if on a vehicle but trip-level data is unavailable, in which case the data would be associated with the vehicle. ID referencing trips_performed .trip_id_performed stop_sequence minimum: 0 integer Ordered stop the vehicle is serving on a particular trip. May be null if the fare collection device is NOT located on a vehicle. May be null if on a vehicle but stop-level data is unavailable, in which case the data would be associated with the vehicle and/or trip. References GTFS positive integer referencing GTFS stop_times .stop_sequence vehicle_id string Identifies the vehicle. May be null if collection device is NOT located on a vehicle. May be null if on a vehicle but vehicle data is unavailable, in which case the data would be associated with a trip and/or stop. ID referencing vehicles .vehicle_id device_id string Identifies the ITS device on which the fare transaction was performed. May be null if only a single device is reporting fare transactions on a vehicle and vehicle_id is provided. May be null if only a single device is reporting fare transactions at a stop and stop_id is provided. ID referencing devices .device_id fare_id string Identifies a fare class, as included in the GTFS Fare_attributes file. References GTFS ID referencing GTFS fare_attributes .fare_id stop_id string Identifies the stop. References GTFS ID referencing GTFS stops .stop_id group_size minimum: 0 integer The number of customers included in the transaction. media_type Allowed Values - Cash or coins - Smart card or ticket - Magnetic-stripe card or ticket - Bank card - Mobile NFC - Optical scan - Button pressed by driver or operator to indicate a boarding or alighting passenger. - Other type string Indicates the fare medium that was used for the transaction. rider_category string Indicates rider category (categories defined by transit agency). For example: Adult Youth Student Senior Other reduced fare_product string Indicates the fare group (fare groups defined by transit agency). For example: Single ride Pass Employer sponsored Other pass fare_period string Indicates the fare period (fare periods defined by transit agency). For example: All day Peak Off-peak Summer Other fare_capped Required boolean Indicates if fare capping is in effect (fare capping options defined by transit agency). fare_media_id string Identifies the individual fare medium used for the transaction. For example, the fare card ID. fare_media_id_purchased string Identifies the individual fare medium purchased in the transaction. For example, the fare card ID. balance number Stored value remaining on an account after the transaction is made. Passenger Events \u00b6 passenger_events.schema.json Timestamped passenger-related events, including boardings and alightings. Primary key: { passenger_event_id } name constraints type description title passenger_event_id Required Unique string Identifies the recorded passenger event. date Required date Service date. References GTFS timestamp Required time Recorded event time. trip_id_performed Required string Identifies the trip performed. ID referencing trips_performed .trip_id_performed stop_sequence Required minimum: 0 integer Ordered stop the vehicle is serving on a particular trip. References GTFS positive integer referencing GTFS stop_times .stop_sequence event_type Required Allowed Values - Vehicle arrived at stop - Vehicle departed stop - Door opened - Door closed - Passenger boarded - Passenger alighted - Kneel was engaged - Kneel was disengaged - Ramp was deployed - Ramp was raised - Ramp deployment failed - Lift was deployed - Lift was raised - Individual bike boarded - Individual bike alighted - Bike rack deployed string Indicates the type of event recorded. vehicle_id Required string Identifies a vehicle. ID referencing vehicles .vehicle_id device_id string Identifies the device that recorded the event. May be null if only a single device is reporting passenger events on a vehicle/ train car and the device_id is not distinct from vehicle_id/train_car_id. ID referencing devices .device_id train_car_id string Identifies the train car. ID referencing train_cars .train_car_id stop_id string Identifies the stop the vehicle is serving. References GTFS ID referencing GTFS stops .stop_id Vehicle Locations \u00b6 vehicle_locations.schema.json Timestamped vehicle locations and speeds. Primary key: { location_ping_id } name constraints type description title location_ping_id Required Unique string Identifies the recorded vehicle location event. date Required date Service date. References GTFS timestamp Required time Recorded event time. trip_id_performed Required string Identifies the trip performed. ID referencing trips_performed .trip_id_performed stop_sequence Required integer Ordered stop the vehicle is approaching or serving on a particular trip. References GTFS positive integer referencing GTFS stop_times .stop_sequence vehicle_id Required string Identifies a vehicle. ID referencing vehicles .vehicle_id device_id string Identifies the device that recorded the vehicle location. May be null if only a single device is reporting vehicle location and the device_id is not distinct from vehicle_id. ID references devices.device_id stop_id string Identifies the stop the vehicle is approaching or serving currently. References GTFS ID referencing GTFS stops .stop_id current_status Allowed Values - Incoming at - Stopped at - In transit to string Indicates the status of the vehicle in reference to a stop. References GTFS-Realtime latitude minimum: -90 maximum: 90 number Degrees North, in the WGS-84 coordinate system. References GTFS-Realtime longitude minimum: -180 maximum: 180 number Degrees East, in the WGS-84 coordinate system. References GTFS-Realtime gps_quality Allowed Values - Excellent - Good - Poor string Indicates the quality of data and communication provided by the GPS. heading minimum: 0 maximum: 360 number Heading, in degrees, clockwise from true north, e.g., 0 would mean north and 90 would mean east. This can be the compass bearing, or the direction towards the next stop or intermediate location. This should not be deduced from the sequence of previous positions, which clients can compute from previous data. References GTFS-Realtime speed minimum: 0 number Momentary speed measured by the vehicle, in meters per second. References GTFS-Realtime odometer minimum: 0 integer Odometer value, in meters. References GTFS-Realtime schedule_deviation integer Indicates schedule adherence in seconds. A negative value represents an early vehicle. (An unscheduled trip would not have a scheduled deviation.) headway_deviation integer Indicates headway adherence in seconds. A negative value represents a shorter than scheduled headway. in_service Allowed Values - In passenger service - En-route to service - Traveling from a service trip - On a layover - Returning to a garage due to a suspension or breakdown - Travel for on-route replacement of breakdown - Other not in service string Indicates status of travel with regard to service. schedule_relationship Allowed Values - Scheduled - Skipped - No data - Unscheduled string Indicates the status of the stop. References GTFS-realtime VehiclePosition.trip.schedule_relationship Summary Tables \u00b6 Station Activities \u00b6 station_activities.schema.json Summarized transactions, entries, and exits by stop or station and time period for each service date (for events not associated with a trip). Primary key: { date , time_period_start , time_period_end , stop_id } name constraints type description title date Required date Service date stop_id Required string Identifies stop. References GTFS ID referencing GTFS stops .stop_id time_period_start Required datetime Aggregation period start time. time_period_end Required datetime Aggregation period end time. time_period_category string Indicates a standard time period to aid further aggregation. For example: All day Peak Off-peak Summer Other total_entries minimum: 0 integer Number of events at the stop considered entries, such as boardings or fare transactions. total_exits minimum: 0 integer Number of events at the stop considered exits, such as alightings. number_of_transactions minimum: 0 integer Number of fare transactions that occurred at a stop. transaction_revenue_cash number Indicates the revenue from cash or coins. transaction_revenue_smartcard number Indicates the revenue from smart card or ticket. transaction_revenue_magcard number Indicates the revenue from magnetic-stripe card or ticket. transaction_revenue_bankcard number Indicates the revenue from bank card (credit or debit card). transaction_revenue_nfc number Indicates the revenue from mobile NFC (smartphone tap, etc.) transaction_revenue_optical number Indicates the revenue from optical scan (of mobile app screen or paper ticket). transaction_revenue_operator number Indicates the revenue from button pressed by driver or operator to indicate a boarding or alighting passenger. transaction_revenue_other number Indicates the revenue from other fare media. transaction_count_cash minimum: 0 number Number of fare transactions made by cash or coins. transaction_count_smartcard minimum: 0 number Number of fare transactions made by smart card or ticket. transaction_count_magcard minimum: 0 number Number of fare transactions made by magnetic-stripe card or ticket. transaction_count_bankcard minimum: 0 number Number of fare transactions made by bank card (credit or debit card). transaction_count_nfc minimum: 0 number Number of fare transactions made by mobile NFC (smartphone tap, etc.) transaction_count_optical minimum: 0 number Number of fare transactions made by optical scan (of mobile app screen or paper ticket). transaction_count_operator minimum: 0 number Number of fare transactions made by button pressed by driver or operator to indicate a boarding or alighting passenger. transaction_count_other minimum: 0 number Number of fare transactions made by other fare media. bike_entries minimum: 0 integer Number of bikes that entered the stop. bike_exits minimum: 0 integer Number of bikes that exited the stop. ramp_entries minimum: 0 integer Number of entries that used a ramp or accessible entrance. ramp_exits minimum: 0 integer Number of exits that used a ramp or accessible exit. Stop Visits \u00b6 stop_visits.schema.json Summarized boarding, alighting, arrival, departure, and other events (kneel engaged, ramp deployed, etc.) by trip and stop for each service date. Primary key: { date , stop_sequence , trip_id_performed , vehicle_id } name constraints type description title date Required date Service date. References GTFS indirectly via calendars.txt and calendar_dates.txt trip_id_performed Required string Identifies the trip performed ID referencing trips_performed .trip_id_performed stop_sequence Required minimum: 0 integer Ordered stop the vehicle is serving on a particular trip. References GTFS positive integer referencing GTFS stop_times .stop_sequence vehicle_id Required string Identifies the vehicle. ID referencing vehicles .vehicle_id dwell minimum: 0 integer Indicates the amount of time a vehicle spent stopped at a stop in seconds. stop_id string Identifies the stop. References GTFS ID referencing GTFS stops .stop_id checkpoint boolean Indicates if the stop should be used for evaluating schedule adherence, on-time performance, and other KPIs. This could be populated to match the GTFS \u201ctimepoint\u201d field. schedule_arrival_time time Scheduled time at which the vehicle arrives at a stop. References GTFS schedule_departure_time time Scheduled time at which the vehicle departs from a stop. References GTFS actual_arrival_time time Time at which the vehicle arrives at a stop. actual_departure_time time Time at which the vehicle departs from a stop. distance minimum: 0 integer Observed distance in meters from the previous stop traveled by the vehicle. boarding_1 minimum: 0 integer Number of riders that entered the front-most or right-most door of the vehicle alighting_1 minimum: 0 integer Number of riders that exited the front-most or right-most door of the vehicle boarding_2 minimum: 0 integer Number of riders that entered the rest of the vehicle\u2019s doors. alighting_2 minimum: 0 integer Number of riders that exited the rest of the vehicle\u2019s doors. load minimum: 0 integer Number of riders on the vehicle when departing the stop. door_open time Time at which the doors opened. door_close time Time at which the doors closed. door_status Allowed Values - Doors did not open - Front door opened and back doors remain closed - Back doors opened and front door remained closed - All doors opened - Other configuration string Indicates actions of the doors during the stop visit. ramp_deployed_time minimum: 0 number Duration of time a ramp is deployed, in seconds. ramp_failure boolean Indicates if the ramp deployment failed at a stop. kneel_deployed_time minimum: 0 number Duration of time a kneel is deployed in seconds. lift_deployed_time minimum: 0 number Duration of time in seconds of time a lift is deployed. bike_rack_deployed boolean Indicates if the bike rack was deployed at a stop. bike_load minimum: 0 integer Number of bikes on the vehicle when departing the stop. revenue number Amount of revenue collected at the stop. number_of_transactions minimum: 0 integer Number of fare transactions that occurred at a stop. transaction_revenue_cash number Indicates the revenue from cash or coins. transaction_revenue_smartcard number Indicates the revenue from smart card or ticket. transaction_revenue_magcard number Indicates the revenue from magnetic-stripe card or ticket. transaction_revenue_bankcard number Indicates the revenue from bank card (credit or debit card). transaction_revenue_nfc number Indicates the revenue from mobile NFC (smartphone tap, etc.) transaction_revenue_optical number Indicates the revenue from optical scan (of mobile app screen or paper ticket). transaction_revenue_operator number Indicates the revenue from button pressed by driver or operator to indicate a boarding or alighting passenger. transaction_revenue_other number Indicates the revenue from other fare media. transaction_count_cash minimum: 0 number Number of fare transactions made by cash or coins. transaction_count_smartcard minimum: 0 number Number of fare transactions made by smart card or ticket. transaction_count_magcard minimum: 0 number Number of fare transactions made by magnetic-stripe card or ticket. transaction_count_bankcard minimum: 0 number Number of fare transactions made by bank card (credit or debit card). transaction_count_nfc minimum: 0 number Number of fare transactions made by mobile NFC (smartphone tap, etc.) transaction_count_optical minimum: 0 number Number of fare transactions made by optical scan (of mobile app screen or paper ticket). transaction_count_operator minimum: 0 number Number of fare transactions made by button pressed by driver or operator to indicate a boarding or alighting passenger. transaction_count_other minimum: 0 number Number of fare transactions made by other fare media. schedule_relationship Allowed Values - Scheduled - Skipped - Missing data - Unscheduled - Canceled - Duplicated - Schedule modified string Indicates the status of stop\u2019s service on the trip.(Note: schedule_arrival_time and schedule_departure_time may differ from GTFS in the case of a schedule modification). References GTFS-realtime TripUpdate Trips Performed \u00b6 trips_performed.schema.json Trips performed for each service date. Primary key: { date , trip_id_performed } name constraints type description title date Required date Service date. References GTFS trip_id_performed Required string Identifies the trip performed. vehicle_id Required string Identifies the vehicle. ID referencing vehicles .vehicle_id trip_id_scheduled string Identifies the scheduled trip associated with the trip performed. One scheduled trip may be associated with multiple operated trips, or an operated trip may not be associated with a scheduled trip. References GTFS ID referencing GTFS trips .trip_id route_id string Identifies the route. References GTFS ID referencing GTFS routes .route_id route_type Allowed Values - Tram / Streetcar / Light rail - Subway / Metro - Rail - Bus - Ferry - Cable tram - Aerial lift - Funicular - Trolleybus - Monorail string Indicates the type of transportation used on a route. References GTFS shape_id string Identifies a geospatial shape that describes the vehicle travel path for a trip. References GTFS ID referencing shapes .shape_id direction_id Allowed Values - 0 - 1 integer Indicates the direction of travel for a trip. References GTFS operator_id string Identifies the vehicle\u2019s operator. ID referencing operators .operator_id block_id string Identifies the block to which the trip belongs. A block consists of a single trip, or many sequential trips made using the same vehicle, defined by shared service days and block_id. A block_id can have trips with different service days, making distinct blocks. See example in GTFS documentation. References GTFS ID referencing trips .block_id trip_start_stop_id string Origin stop_id. References GTFS ID referencing GTFS stops .stop_id trip_end_stop_id string Destination stop_id. References GTFS ID referencing GTFS stops .stop_id schedule_trip_start time Scheduled departure time from the trip\u2019s origin. schedule_trip_end time Scheduled end time at the trip\u2019s destination. actual_trip_start time Time at which the vehicle departed its origin. actual_trip_end time Time at which the vehicle arrived at its destination. in_service Allowed Values - In passenger service - En-route to service - Traveling from a service trip - On a layover - Returning to a garage due to a suspension or breakdown - Travel for on-route replacement of breakdown - Other not in service string Indicates status of travel with regard to service. schedule_relationship Allowed Values - Scheduled - Added - Unscheduled - Canceled - Duplicated string Indicates the status of the trip. References GTFS-realtime TripUpdate.trip.schedule_relationship Supporting Tables \u00b6 Devices \u00b6 devices.schema.json Measurement devices, such as AVL, APC, and AFC devices, associated with vehicles or stops or stations. Primary key: { device_id } name constraints type description title device_id Required Unique string Identifies a device. If possible, this should match other internal agency device IDs. stop_id string Identifies the stop at which the device is located. May be null if the device is on a vehicle. References GTFS ID referencing GTFS stops .stop_id vehicle_id string Identifies the vehicle on which the device is located. May be null if the device is at a stop or station. ID referencing vehicles .vehicle_id train_car_id string Identifies the train car or asset on which the device is located. May be null if the device is at a stop or station or if the Train_cars file is not used. ID referencing train_cars .train_car_id device_type Allowed Values - APC - AFC - AVL - Other string Indicates the type of device. device_vendor string Vendor of the device. device_model string Model of the device as specified by the vendor. location string Indicates the location of a device on the vehicle or at a station. For example: Front door. Back door. Entrance (not located on a vehicle). Exit (not located on a vehicle). Entrance/exit (not located on a vehicle). Other. Operators \u00b6 operators.schema.json Personnel who operate vehicles. Primary key: { operator_id } name constraints type description operator_id Required Unique string Identifies an operator. If possible, this should match other internal agency operator IDs. Train Cars \u00b6 train_cars.schema.json Assets that comprise vehicles, such as train cars, with descriptive information. Primary key: { train_car_id } name constraints type description train_car_id Required Unique string Identifies a train car or asset. If possible, this should match other internal agency asset IDs. model_name string Describes the train car or asset\u2019s model. facility_name string Name or internal agency ID for the facility where the train car or asset is generally held. capacity_seated minimum: 0 integer Number of seats on the train car or asset. wheelchair_capacity minimum: 0 integer Number of wheelchair spaces on the train car or asset. bike_capacity minimum: 0 integer Number of bike spaces on the train car or asset. bike_rack boolean Indicates if the train car or asset has a usable bike rack. capacity_standing minimum: 0 integer Standing capacity of the train car or asset set by the manufacturer. train_car_type Allowed Values - Train car - Trolley - Other string Indicates the type of train car or asset. Vehicle Train Cars \u00b6 vehicle_train_cars.schema.json Relationships between assets and vehicles. Primary key: { train_car_id , vehicle_id } name constraints type description title vehicle_id Required string Identifies a vehicle, such as a train consist. If possible, this should match other internal agency vehicle IDs. ID referencing vehicles .vehicle_id train_car_id Required string Identifies a train car or an asset that is a component of the vehicle. ID referencing train_cars .train_car_id order minimum: 0 integer The assigned order of the train car or asset within the vehicle. operator_id string Identifies an operator (person). If possible, this should match other internal agency operator IDs. Vehicles \u00b6 vehicles.schema.json Vehicles, including buses and train consists, with descriptive information. Primary key: { vehicle_id } name constraints type description vehicle_id Required Unique string Identifies a vehicle, such as a bus or a train consist. If possible, this should match other internal agency vehicle IDs and the GTFS-realtime VehicleDescriptor. vehicle_start time The time at which the vehicle or train consist is first in operation (i.e., when the consist has been created). Required if Train_car is used. vehicle_end time The time at which the vehicle or train consist no longer exists (i.e., the consist is separated or modified). Only used if Train_car is used. model_name string Describes the vehicle\u2019s model. facility_name string Name or internal agency ID for the facility where the vehicle is generally held. capacity_seated minimum: 0 integer Number of seats on the vehicle. Used if Train_car is not used. wheelchair_capacity minimum: 0 integer Number of wheelchair spaces on the vehicle. Used if Train_car is not used. capacity_bike minimum: 0 integer Number of bike spaces on the vehicle. Used if Train_car is not used. bike_rack boolean Indicates if the vehicle has a useable bike rack. Used if Train_car is not used. capacity_standing minimum: 0 integer Standing capacity of the vehicle set by the manufacturer. Used if Train_car is not used.","title":"Table Schemas"},{"location":"tables/#data-table-schemas","text":"Data table schemas are specified in JSON and are compatible with the frictionless data table schema standards.","title":"Data Table Schemas"},{"location":"tables/#event-tables","text":"","title":"Event Tables"},{"location":"tables/#fare-transactions","text":"fare_transactions.schema.json Timestamped fare transaction, associated with devices. Primary key: { transaction_id } name constraints type description rdfType title transaction_id Required Unique string Identifies the fare transaction. date Required date Service date. References GTFS timestamp Required time Recorded event time, including for transactions that may be aggregated values associated with a trip or vehicle. amount Required number Value of the transaction. currency_type Required string Currency used for the transaction. References GTFS https://schema.org/currency fare_action Required Allowed Values - Unknown action type - Purchase - Enter - Exit - Transfer entrance - Transfer exit - Add - Activate - Adjust - Other string Indicates the type of action performed. trip_id_performed string Identifies the trip performed. May be null if the fare collection device is NOT located on a vehicle. May be null if on a vehicle but trip-level data is unavailable, in which case the data would be associated with the vehicle. ID referencing trips_performed .trip_id_performed stop_sequence minimum: 0 integer Ordered stop the vehicle is serving on a particular trip. May be null if the fare collection device is NOT located on a vehicle. May be null if on a vehicle but stop-level data is unavailable, in which case the data would be associated with the vehicle and/or trip. References GTFS positive integer referencing GTFS stop_times .stop_sequence vehicle_id string Identifies the vehicle. May be null if collection device is NOT located on a vehicle. May be null if on a vehicle but vehicle data is unavailable, in which case the data would be associated with a trip and/or stop. ID referencing vehicles .vehicle_id device_id string Identifies the ITS device on which the fare transaction was performed. May be null if only a single device is reporting fare transactions on a vehicle and vehicle_id is provided. May be null if only a single device is reporting fare transactions at a stop and stop_id is provided. ID referencing devices .device_id fare_id string Identifies a fare class, as included in the GTFS Fare_attributes file. References GTFS ID referencing GTFS fare_attributes .fare_id stop_id string Identifies the stop. References GTFS ID referencing GTFS stops .stop_id group_size minimum: 0 integer The number of customers included in the transaction. media_type Allowed Values - Cash or coins - Smart card or ticket - Magnetic-stripe card or ticket - Bank card - Mobile NFC - Optical scan - Button pressed by driver or operator to indicate a boarding or alighting passenger. - Other type string Indicates the fare medium that was used for the transaction. rider_category string Indicates rider category (categories defined by transit agency). For example: Adult Youth Student Senior Other reduced fare_product string Indicates the fare group (fare groups defined by transit agency). For example: Single ride Pass Employer sponsored Other pass fare_period string Indicates the fare period (fare periods defined by transit agency). For example: All day Peak Off-peak Summer Other fare_capped Required boolean Indicates if fare capping is in effect (fare capping options defined by transit agency). fare_media_id string Identifies the individual fare medium used for the transaction. For example, the fare card ID. fare_media_id_purchased string Identifies the individual fare medium purchased in the transaction. For example, the fare card ID. balance number Stored value remaining on an account after the transaction is made.","title":"Fare Transactions"},{"location":"tables/#passenger-events","text":"passenger_events.schema.json Timestamped passenger-related events, including boardings and alightings. Primary key: { passenger_event_id } name constraints type description title passenger_event_id Required Unique string Identifies the recorded passenger event. date Required date Service date. References GTFS timestamp Required time Recorded event time. trip_id_performed Required string Identifies the trip performed. ID referencing trips_performed .trip_id_performed stop_sequence Required minimum: 0 integer Ordered stop the vehicle is serving on a particular trip. References GTFS positive integer referencing GTFS stop_times .stop_sequence event_type Required Allowed Values - Vehicle arrived at stop - Vehicle departed stop - Door opened - Door closed - Passenger boarded - Passenger alighted - Kneel was engaged - Kneel was disengaged - Ramp was deployed - Ramp was raised - Ramp deployment failed - Lift was deployed - Lift was raised - Individual bike boarded - Individual bike alighted - Bike rack deployed string Indicates the type of event recorded. vehicle_id Required string Identifies a vehicle. ID referencing vehicles .vehicle_id device_id string Identifies the device that recorded the event. May be null if only a single device is reporting passenger events on a vehicle/ train car and the device_id is not distinct from vehicle_id/train_car_id. ID referencing devices .device_id train_car_id string Identifies the train car. ID referencing train_cars .train_car_id stop_id string Identifies the stop the vehicle is serving. References GTFS ID referencing GTFS stops .stop_id","title":"Passenger Events"},{"location":"tables/#vehicle-locations","text":"vehicle_locations.schema.json Timestamped vehicle locations and speeds. Primary key: { location_ping_id } name constraints type description title location_ping_id Required Unique string Identifies the recorded vehicle location event. date Required date Service date. References GTFS timestamp Required time Recorded event time. trip_id_performed Required string Identifies the trip performed. ID referencing trips_performed .trip_id_performed stop_sequence Required integer Ordered stop the vehicle is approaching or serving on a particular trip. References GTFS positive integer referencing GTFS stop_times .stop_sequence vehicle_id Required string Identifies a vehicle. ID referencing vehicles .vehicle_id device_id string Identifies the device that recorded the vehicle location. May be null if only a single device is reporting vehicle location and the device_id is not distinct from vehicle_id. ID references devices.device_id stop_id string Identifies the stop the vehicle is approaching or serving currently. References GTFS ID referencing GTFS stops .stop_id current_status Allowed Values - Incoming at - Stopped at - In transit to string Indicates the status of the vehicle in reference to a stop. References GTFS-Realtime latitude minimum: -90 maximum: 90 number Degrees North, in the WGS-84 coordinate system. References GTFS-Realtime longitude minimum: -180 maximum: 180 number Degrees East, in the WGS-84 coordinate system. References GTFS-Realtime gps_quality Allowed Values - Excellent - Good - Poor string Indicates the quality of data and communication provided by the GPS. heading minimum: 0 maximum: 360 number Heading, in degrees, clockwise from true north, e.g., 0 would mean north and 90 would mean east. This can be the compass bearing, or the direction towards the next stop or intermediate location. This should not be deduced from the sequence of previous positions, which clients can compute from previous data. References GTFS-Realtime speed minimum: 0 number Momentary speed measured by the vehicle, in meters per second. References GTFS-Realtime odometer minimum: 0 integer Odometer value, in meters. References GTFS-Realtime schedule_deviation integer Indicates schedule adherence in seconds. A negative value represents an early vehicle. (An unscheduled trip would not have a scheduled deviation.) headway_deviation integer Indicates headway adherence in seconds. A negative value represents a shorter than scheduled headway. in_service Allowed Values - In passenger service - En-route to service - Traveling from a service trip - On a layover - Returning to a garage due to a suspension or breakdown - Travel for on-route replacement of breakdown - Other not in service string Indicates status of travel with regard to service. schedule_relationship Allowed Values - Scheduled - Skipped - No data - Unscheduled string Indicates the status of the stop. References GTFS-realtime VehiclePosition.trip.schedule_relationship","title":"Vehicle Locations"},{"location":"tables/#summary-tables","text":"","title":"Summary Tables"},{"location":"tables/#station-activities","text":"station_activities.schema.json Summarized transactions, entries, and exits by stop or station and time period for each service date (for events not associated with a trip). Primary key: { date , time_period_start , time_period_end , stop_id } name constraints type description title date Required date Service date stop_id Required string Identifies stop. References GTFS ID referencing GTFS stops .stop_id time_period_start Required datetime Aggregation period start time. time_period_end Required datetime Aggregation period end time. time_period_category string Indicates a standard time period to aid further aggregation. For example: All day Peak Off-peak Summer Other total_entries minimum: 0 integer Number of events at the stop considered entries, such as boardings or fare transactions. total_exits minimum: 0 integer Number of events at the stop considered exits, such as alightings. number_of_transactions minimum: 0 integer Number of fare transactions that occurred at a stop. transaction_revenue_cash number Indicates the revenue from cash or coins. transaction_revenue_smartcard number Indicates the revenue from smart card or ticket. transaction_revenue_magcard number Indicates the revenue from magnetic-stripe card or ticket. transaction_revenue_bankcard number Indicates the revenue from bank card (credit or debit card). transaction_revenue_nfc number Indicates the revenue from mobile NFC (smartphone tap, etc.) transaction_revenue_optical number Indicates the revenue from optical scan (of mobile app screen or paper ticket). transaction_revenue_operator number Indicates the revenue from button pressed by driver or operator to indicate a boarding or alighting passenger. transaction_revenue_other number Indicates the revenue from other fare media. transaction_count_cash minimum: 0 number Number of fare transactions made by cash or coins. transaction_count_smartcard minimum: 0 number Number of fare transactions made by smart card or ticket. transaction_count_magcard minimum: 0 number Number of fare transactions made by magnetic-stripe card or ticket. transaction_count_bankcard minimum: 0 number Number of fare transactions made by bank card (credit or debit card). transaction_count_nfc minimum: 0 number Number of fare transactions made by mobile NFC (smartphone tap, etc.) transaction_count_optical minimum: 0 number Number of fare transactions made by optical scan (of mobile app screen or paper ticket). transaction_count_operator minimum: 0 number Number of fare transactions made by button pressed by driver or operator to indicate a boarding or alighting passenger. transaction_count_other minimum: 0 number Number of fare transactions made by other fare media. bike_entries minimum: 0 integer Number of bikes that entered the stop. bike_exits minimum: 0 integer Number of bikes that exited the stop. ramp_entries minimum: 0 integer Number of entries that used a ramp or accessible entrance. ramp_exits minimum: 0 integer Number of exits that used a ramp or accessible exit.","title":"Station Activities"},{"location":"tables/#stop-visits","text":"stop_visits.schema.json Summarized boarding, alighting, arrival, departure, and other events (kneel engaged, ramp deployed, etc.) by trip and stop for each service date. Primary key: { date , stop_sequence , trip_id_performed , vehicle_id } name constraints type description title date Required date Service date. References GTFS indirectly via calendars.txt and calendar_dates.txt trip_id_performed Required string Identifies the trip performed ID referencing trips_performed .trip_id_performed stop_sequence Required minimum: 0 integer Ordered stop the vehicle is serving on a particular trip. References GTFS positive integer referencing GTFS stop_times .stop_sequence vehicle_id Required string Identifies the vehicle. ID referencing vehicles .vehicle_id dwell minimum: 0 integer Indicates the amount of time a vehicle spent stopped at a stop in seconds. stop_id string Identifies the stop. References GTFS ID referencing GTFS stops .stop_id checkpoint boolean Indicates if the stop should be used for evaluating schedule adherence, on-time performance, and other KPIs. This could be populated to match the GTFS \u201ctimepoint\u201d field. schedule_arrival_time time Scheduled time at which the vehicle arrives at a stop. References GTFS schedule_departure_time time Scheduled time at which the vehicle departs from a stop. References GTFS actual_arrival_time time Time at which the vehicle arrives at a stop. actual_departure_time time Time at which the vehicle departs from a stop. distance minimum: 0 integer Observed distance in meters from the previous stop traveled by the vehicle. boarding_1 minimum: 0 integer Number of riders that entered the front-most or right-most door of the vehicle alighting_1 minimum: 0 integer Number of riders that exited the front-most or right-most door of the vehicle boarding_2 minimum: 0 integer Number of riders that entered the rest of the vehicle\u2019s doors. alighting_2 minimum: 0 integer Number of riders that exited the rest of the vehicle\u2019s doors. load minimum: 0 integer Number of riders on the vehicle when departing the stop. door_open time Time at which the doors opened. door_close time Time at which the doors closed. door_status Allowed Values - Doors did not open - Front door opened and back doors remain closed - Back doors opened and front door remained closed - All doors opened - Other configuration string Indicates actions of the doors during the stop visit. ramp_deployed_time minimum: 0 number Duration of time a ramp is deployed, in seconds. ramp_failure boolean Indicates if the ramp deployment failed at a stop. kneel_deployed_time minimum: 0 number Duration of time a kneel is deployed in seconds. lift_deployed_time minimum: 0 number Duration of time in seconds of time a lift is deployed. bike_rack_deployed boolean Indicates if the bike rack was deployed at a stop. bike_load minimum: 0 integer Number of bikes on the vehicle when departing the stop. revenue number Amount of revenue collected at the stop. number_of_transactions minimum: 0 integer Number of fare transactions that occurred at a stop. transaction_revenue_cash number Indicates the revenue from cash or coins. transaction_revenue_smartcard number Indicates the revenue from smart card or ticket. transaction_revenue_magcard number Indicates the revenue from magnetic-stripe card or ticket. transaction_revenue_bankcard number Indicates the revenue from bank card (credit or debit card). transaction_revenue_nfc number Indicates the revenue from mobile NFC (smartphone tap, etc.) transaction_revenue_optical number Indicates the revenue from optical scan (of mobile app screen or paper ticket). transaction_revenue_operator number Indicates the revenue from button pressed by driver or operator to indicate a boarding or alighting passenger. transaction_revenue_other number Indicates the revenue from other fare media. transaction_count_cash minimum: 0 number Number of fare transactions made by cash or coins. transaction_count_smartcard minimum: 0 number Number of fare transactions made by smart card or ticket. transaction_count_magcard minimum: 0 number Number of fare transactions made by magnetic-stripe card or ticket. transaction_count_bankcard minimum: 0 number Number of fare transactions made by bank card (credit or debit card). transaction_count_nfc minimum: 0 number Number of fare transactions made by mobile NFC (smartphone tap, etc.) transaction_count_optical minimum: 0 number Number of fare transactions made by optical scan (of mobile app screen or paper ticket). transaction_count_operator minimum: 0 number Number of fare transactions made by button pressed by driver or operator to indicate a boarding or alighting passenger. transaction_count_other minimum: 0 number Number of fare transactions made by other fare media. schedule_relationship Allowed Values - Scheduled - Skipped - Missing data - Unscheduled - Canceled - Duplicated - Schedule modified string Indicates the status of stop\u2019s service on the trip.(Note: schedule_arrival_time and schedule_departure_time may differ from GTFS in the case of a schedule modification). References GTFS-realtime TripUpdate","title":"Stop Visits"},{"location":"tables/#trips-performed","text":"trips_performed.schema.json Trips performed for each service date. Primary key: { date , trip_id_performed } name constraints type description title date Required date Service date. References GTFS trip_id_performed Required string Identifies the trip performed. vehicle_id Required string Identifies the vehicle. ID referencing vehicles .vehicle_id trip_id_scheduled string Identifies the scheduled trip associated with the trip performed. One scheduled trip may be associated with multiple operated trips, or an operated trip may not be associated with a scheduled trip. References GTFS ID referencing GTFS trips .trip_id route_id string Identifies the route. References GTFS ID referencing GTFS routes .route_id route_type Allowed Values - Tram / Streetcar / Light rail - Subway / Metro - Rail - Bus - Ferry - Cable tram - Aerial lift - Funicular - Trolleybus - Monorail string Indicates the type of transportation used on a route. References GTFS shape_id string Identifies a geospatial shape that describes the vehicle travel path for a trip. References GTFS ID referencing shapes .shape_id direction_id Allowed Values - 0 - 1 integer Indicates the direction of travel for a trip. References GTFS operator_id string Identifies the vehicle\u2019s operator. ID referencing operators .operator_id block_id string Identifies the block to which the trip belongs. A block consists of a single trip, or many sequential trips made using the same vehicle, defined by shared service days and block_id. A block_id can have trips with different service days, making distinct blocks. See example in GTFS documentation. References GTFS ID referencing trips .block_id trip_start_stop_id string Origin stop_id. References GTFS ID referencing GTFS stops .stop_id trip_end_stop_id string Destination stop_id. References GTFS ID referencing GTFS stops .stop_id schedule_trip_start time Scheduled departure time from the trip\u2019s origin. schedule_trip_end time Scheduled end time at the trip\u2019s destination. actual_trip_start time Time at which the vehicle departed its origin. actual_trip_end time Time at which the vehicle arrived at its destination. in_service Allowed Values - In passenger service - En-route to service - Traveling from a service trip - On a layover - Returning to a garage due to a suspension or breakdown - Travel for on-route replacement of breakdown - Other not in service string Indicates status of travel with regard to service. schedule_relationship Allowed Values - Scheduled - Added - Unscheduled - Canceled - Duplicated string Indicates the status of the trip. References GTFS-realtime TripUpdate.trip.schedule_relationship","title":"Trips Performed"},{"location":"tables/#supporting-tables","text":"","title":"Supporting Tables"},{"location":"tables/#devices","text":"devices.schema.json Measurement devices, such as AVL, APC, and AFC devices, associated with vehicles or stops or stations. Primary key: { device_id } name constraints type description title device_id Required Unique string Identifies a device. If possible, this should match other internal agency device IDs. stop_id string Identifies the stop at which the device is located. May be null if the device is on a vehicle. References GTFS ID referencing GTFS stops .stop_id vehicle_id string Identifies the vehicle on which the device is located. May be null if the device is at a stop or station. ID referencing vehicles .vehicle_id train_car_id string Identifies the train car or asset on which the device is located. May be null if the device is at a stop or station or if the Train_cars file is not used. ID referencing train_cars .train_car_id device_type Allowed Values - APC - AFC - AVL - Other string Indicates the type of device. device_vendor string Vendor of the device. device_model string Model of the device as specified by the vendor. location string Indicates the location of a device on the vehicle or at a station. For example: Front door. Back door. Entrance (not located on a vehicle). Exit (not located on a vehicle). Entrance/exit (not located on a vehicle). Other.","title":"Devices"},{"location":"tables/#operators","text":"operators.schema.json Personnel who operate vehicles. Primary key: { operator_id } name constraints type description operator_id Required Unique string Identifies an operator. If possible, this should match other internal agency operator IDs.","title":"Operators"},{"location":"tables/#train-cars","text":"train_cars.schema.json Assets that comprise vehicles, such as train cars, with descriptive information. Primary key: { train_car_id } name constraints type description train_car_id Required Unique string Identifies a train car or asset. If possible, this should match other internal agency asset IDs. model_name string Describes the train car or asset\u2019s model. facility_name string Name or internal agency ID for the facility where the train car or asset is generally held. capacity_seated minimum: 0 integer Number of seats on the train car or asset. wheelchair_capacity minimum: 0 integer Number of wheelchair spaces on the train car or asset. bike_capacity minimum: 0 integer Number of bike spaces on the train car or asset. bike_rack boolean Indicates if the train car or asset has a usable bike rack. capacity_standing minimum: 0 integer Standing capacity of the train car or asset set by the manufacturer. train_car_type Allowed Values - Train car - Trolley - Other string Indicates the type of train car or asset.","title":"Train Cars"},{"location":"tables/#vehicle-train-cars","text":"vehicle_train_cars.schema.json Relationships between assets and vehicles. Primary key: { train_car_id , vehicle_id } name constraints type description title vehicle_id Required string Identifies a vehicle, such as a train consist. If possible, this should match other internal agency vehicle IDs. ID referencing vehicles .vehicle_id train_car_id Required string Identifies a train car or an asset that is a component of the vehicle. ID referencing train_cars .train_car_id order minimum: 0 integer The assigned order of the train car or asset within the vehicle. operator_id string Identifies an operator (person). If possible, this should match other internal agency operator IDs.","title":"Vehicle Train Cars"},{"location":"tables/#vehicles","text":"vehicles.schema.json Vehicles, including buses and train consists, with descriptive information. Primary key: { vehicle_id } name constraints type description vehicle_id Required Unique string Identifies a vehicle, such as a bus or a train consist. If possible, this should match other internal agency vehicle IDs and the GTFS-realtime VehicleDescriptor. vehicle_start time The time at which the vehicle or train consist is first in operation (i.e., when the consist has been created). Required if Train_car is used. vehicle_end time The time at which the vehicle or train consist no longer exists (i.e., the consist is separated or modified). Only used if Train_car is used. model_name string Describes the vehicle\u2019s model. facility_name string Name or internal agency ID for the facility where the vehicle is generally held. capacity_seated minimum: 0 integer Number of seats on the vehicle. Used if Train_car is not used. wheelchair_capacity minimum: 0 integer Number of wheelchair spaces on the vehicle. Used if Train_car is not used. capacity_bike minimum: 0 integer Number of bike spaces on the vehicle. Used if Train_car is not used. bike_rack boolean Indicates if the vehicle has a useable bike rack. Used if Train_car is not used. capacity_standing minimum: 0 integer Standing capacity of the vehicle set by the manufacturer. Used if Train_car is not used.","title":"Vehicles"}]}